// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ────────────────────────────────────────────────────────────
   NextAuth core models
────────────────────────────────────────────────────────────── */
model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?

  displayName   String?        @unique
  photoUrl      String?
  createdAt     DateTime       @default(now())

  role          Role           @default(USER)

  plushies      Plushie[]
  votes         Vote[]
  preorders     Preorder[]
  comments      Comment[]
  likes         Like[]

  shippingInfo  ShippingInfo?  @relation("UserShipping")
  billingInfo   BillingInfo?   @relation("UserBilling")

  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/* ────────────────────────────────────────────────────────────
   Application models
────────────────────────────────────────────────────────────── */
model Plushie {
  id               String         @id @default(cuid())
  name             String
  animal           String
  description      String?        // ✅ Optional user-added description
  imageUrl         String
  promptRaw        String
  promptSanitized  String
  texture          String
  size             String
  emotion          String
  color            String
  outfit           String
  accessories      String
  pose             String
  isPublished      Boolean        @default(false)
  isFeatured       Boolean        @default(false)
  createdAt        DateTime       @default(now())
  expiresAt        DateTime?
  creator          User           @relation(fields: [creatorId], references: [id])
  creatorId        String
  votes            Vote[]
  preorders        Preorder[]
  comments         Comment[]
  likes            Like[]
  goal             Int            @default(50)
  minimumGoal      Int            @default(25)
  pledged          Int            @default(0)
  status           PlushieStatus  @default(PENDING)
}

model Vote {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  plushie    Plushie  @relation(fields: [plushieId], references: [id])
  plushieId  String
  createdAt  DateTime @default(now())

  @@unique([userId, plushieId])
}

model Preorder {
  id              String         @id @default(cuid())
  user        User?          @relation(fields: [userId], references: [id])
  userId      String?        // nullable to allow guest checkout
  plushie         Plushie        @relation(fields: [plushieId], references: [id])
  plushieId       String
  createdAt       DateTime       @default(now())
  price           Float
  quantity        Int            @default(1)
  status          PreorderStatus @default(PENDING)

  guestEmail String? // optional email field for guest users

  shippingInfo    ShippingInfo?  @relation("PreorderShipping", fields: [shippingInfoId], references: [id])
  shippingInfoId  String?        @unique

  billingInfo     BillingInfo?   @relation("PreorderBilling", fields: [billingInfoId], references: [id])
  billingInfoId   String?        @unique

  payment         PaymentIntent? @relation(fields: [paymentIntentId], references: [id])
  paymentIntentId String?        @unique
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  plushie   Plushie   @relation(fields: [plushieId], references: [id])
  plushieId String

  // Self-referencing relationship for replies
  parent     Comment?   @relation("CommentReplies", fields: [parentId], references: [id])
  parentId   String?
  replies    Comment[]  @relation("CommentReplies")

  @@index([parentId])
}

model Like {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  plushie    Plushie  @relation(fields: [plushieId], references: [id])
  plushieId  String
  createdAt  DateTime @default(now())

  @@unique([userId, plushieId])
}

model ShippingInfo {
  id         String   @id @default(cuid())
  fullName   String
  address1   String
  address2   String?
  city       String
  state      String
  zip        String
  country    String

  user       User?     @relation("UserShipping", fields: [userId], references: [id])
  userId     String?   @unique

  preorder   Preorder? @relation("PreorderShipping")
}

model BillingInfo {
  id         String   @id @default(cuid())
  fullName   String
  address1   String
  address2   String?
  city       String
  state      String
  zip        String
  country    String

  cardBrand  String?
  cardLast4  String?
  cardToken  String?

  user       User?     @relation("UserBilling", fields: [userId], references: [id])
  userId     String?   @unique

  preorder   Preorder? @relation("PreorderBilling")
}

model PaymentIntent {
  id           String               @id @default(cuid())
  provider     String
  intentId     String               @unique
  clientSecret String?
  status       PaymentIntentStatus  @default(REQUIRES_CAPTURE)
  createdAt    DateTime             @default(now())

  // ✅ New fields for address
  fullName     String?
  address1     String?
  address2     String?
  city         String?
  state        String?
  zip          String?
  country      String?

  preorder     Preorder?
}

/* ────────────────────────────────────────────────────────────
   ENUMS
────────────────────────────────────────────────────────────── */
enum PlushieStatus {
  PENDING
  IN_PRODUCTION
  SHIPPED
  CANCELED
}

enum PreorderStatus {
  PENDING
  CONFIRMED
  COLLECTED
  CANCELED
  REFUNDED
}

enum PaymentIntentStatus {
  REQUIRES_CAPTURE
  SUCCEEDED
  FAILED
}

enum Role {
  USER
  ADMIN
}
