// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"  // <- change this!
}

/* ────────────────────────────────────────────────────────────
   NextAuth core models
────────────────────────────────────────────────────────────── */
model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?

  displayName   String?        @unique
  photoUrl      String?
  bio           String         @default("")
  createdAt     DateTime       @default(now())

  role          Role           @default(USER)

  clothingItems ClothingItem[]
  votes         Vote[]
  preorders     Preorder[]
  comments      Comment[]
  likes         Like[]
  wardrobes     Wardrobe[]

  // Add followers/following relationships
  followers     Follow[]       @relation("UserFollowers")
  following     Follow[]       @relation("UserFollowing")

  shippingInfo  ShippingInfo?  @relation("UserShipping")
  billingInfo   BillingInfo?   @relation("UserBilling")

  accounts      Account[]
  sessions      Session[]

  // Rate limiting & subscription relationships
  subscription  UserSubscription?
  dailyUsage    DailyUsage[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/* ────────────────────────────────────────────────────────────
   Application models
────────────────────────────────────────────────────────────── */
enum ItemStatus {
  CONCEPT     // Initial stage - just an idea
  SELECTED    // Hand-picked for next drop
  AVAILABLE   // Currently available for purchase
  SOLD_OUT    // No longer available
  ARCHIVED    // Removed from shop but kept for reference
}

model ClothingItem {
  id               String         @id @default(cuid())
  name             String
  itemType         String        // Category/Type (e.g. Tops, Bottoms, Outerwear)
  description      String?
  imageUrl         String?    // Keep for backward compatibility
  frontImage       String?    // Front view (optional for now)
  rightImage       String?    // Right side view
  leftImage        String?    // Left side view
  backImage        String?    // Back view
  promptRaw        String?
  promptSanitized  String?
  material         String?    // Material (e.g. Cotton, Linen, Silk)
  size             String?    // Standard sizes (XS, S, M, L, XL, XXL)
  color            String?    // Color of the item
  pattern          String?    // Pattern/Print (e.g. Solid, Striped, Plaid)
  style            String?    // Style/Occasion (e.g. Casual, Formal, Business)
  fit              String?    // Fit/Cut (e.g. Slim, Regular, Relaxed)
  brand            String?    // Brand/Designer name
  promptJsonData   String?
  price            Decimal?   // Price of the item (only set when status becomes SELECTED)
  cost             Decimal?   // AI-estimated cost of the item
  isPublished      Boolean    @default(false)
  isFeatured       Boolean    @default(false)
  isDeleted        Boolean    @default(false)
  createdAt        DateTime   @default(now())
  expiresAt        DateTime?
  estimatedShipDate DateTime? // When the item is expected to ship if goal is reached
  creator          User       @relation(fields: [creatorId], references: [id])
  creatorId        String
  votes            Vote[]
  preorders        Preorder[]
  comments         Comment[]
  likes            Like[]
  customerRating   Float?     // Customer Rating (1-5 stars)
  inStock          Boolean    @default(true) // Availability
  wardrobeItems    WardrobeItem[]
  
  // Drop-based system fields
  status           ItemStatus @default(CONCEPT)
  totalQuantity    Int?      // Only set when status becomes SELECTED
  soldQuantity     Int       @default(0)
  batchNumber      Int?      // Which drop/batch this belongs to
  dropDate         DateTime? // When this will be/was dropped
  selectionDate    DateTime? // When this was selected for production
  releaseDate      DateTime? // When this was released to the shop

  // Remove legacy fields that are no longer needed
  @@map("ClothingItem")
}

model Vote {
  id             String       @id @default(cuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  clothingItem   ClothingItem @relation(fields: [clothingItemId], references: [id])
  clothingItemId String
  createdAt      DateTime     @default(now())

  @@unique([userId, clothingItemId])
}

model Preorder {
  id              String         @id @default(cuid())
  user            User?          @relation(fields: [userId], references: [id])
  userId          String?
  clothingItem    ClothingItem   @relation(fields: [clothingItemId], references: [id])
  clothingItemId  String
  createdAt       DateTime       @default(now())
  price           Float
  quantity        Int            @default(1)
  status          PreorderStatus @default(PENDING)
  size            String         // Add size field
  guestEmail String? // optional email field for guest users

  shippingInfo    ShippingInfo?  @relation("PreorderShipping", fields: [shippingInfoId], references: [id])
  shippingInfoId  String?        @unique

  billingInfo     BillingInfo?   @relation("PreorderBilling", fields: [billingInfoId], references: [id])
  billingInfoId   String?        @unique

  payment         PaymentIntent? @relation(fields: [paymentIntentId], references: [id])
  paymentIntentId String?        @unique
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  clothingItem ClothingItem @relation(fields: [clothingItemId], references: [id])
  clothingItemId String

  // Self-referencing relationship for replies
  parent     Comment?   @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  parentId   String?
  replies    Comment[]  @relation("CommentReplies")

  @@index([parentId])
}

model Like {
  id             String       @id @default(cuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  clothingItem   ClothingItem @relation(fields: [clothingItemId], references: [id])
  clothingItemId String
  createdAt      DateTime     @default(now())

  @@unique([userId, clothingItemId])
}

model ShippingInfo {
  id         String   @id @default(cuid())
  fullName   String
  address1   String
  address2   String?
  city       String
  state      String
  zip        String
  country    String

  user       User?     @relation("UserShipping", fields: [userId], references: [id])
  userId     String?   @unique

  preorder   Preorder? @relation("PreorderShipping")
}

model BillingInfo {
  id         String   @id @default(cuid())
  fullName   String
  address1   String
  address2   String?
  city       String
  state      String
  zip        String
  country    String

  cardBrand  String?
  cardLast4  String?
  cardToken  String?

  user       User?     @relation("UserBilling", fields: [userId], references: [id])
  userId     String?   @unique

  preorder   Preorder? @relation("PreorderBilling")
}

model PaymentIntent {
  id           String               @id @default(cuid())
  provider     String
  intentId     String               @unique
  clientSecret String?
  status       PaymentIntentStatus  @default(REQUIRES_CAPTURE)
  createdAt    DateTime             @default(now())

  // ✅ New fields for address
  fullName     String?
  address1     String?
  address2     String?
  city         String?
  state        String?
  zip          String?
  country      String?

  preorder     Preorder?
}

/* ────────────────────────────────────────────────────────────
   ENUMS
────────────────────────────────────────────────────────────── */
enum ClothingItemStatus {
  PENDING
  IN_PRODUCTION
  SHIPPED
  CANCELED
}

enum PreorderStatus {
  PENDING
  CONFIRMED
  COLLECTED
  CANCELED
  REFUNDED
}

enum PaymentIntentStatus {
  REQUIRES_CAPTURE
  SUCCEEDED
  FAILED
}

enum Role {
  USER
  ADMIN
}

/* ────────────────────────────────────────────────────────────
   Wardrobe models
────────────────────────────────────────────────────────────── */
model Wardrobe {
  id          String         @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  style       String?       // e.g., "Casual", "Formal", "Streetwear"
  season      String?       // e.g., "Summer", "Winter", "All Season"
  occasion    String?       // e.g., "Work", "Party", "Everyday"
  
  creator     User          @relation(fields: [creatorId], references: [id])
  creatorId   String
  
  items       WardrobeItem[]
}

model WardrobeItem {
  id          String       @id @default(cuid())
  wardrobe    Wardrobe     @relation(fields: [wardrobeId], references: [id])
  wardrobeId  String
  clothingItem ClothingItem @relation(fields: [clothingItemId], references: [id])
  clothingItemId String
  addedAt     DateTime    @default(now())
  notes       String?     // Optional notes about how this item fits in the wardrobe
  
  @@unique([wardrobeId, clothingItemId]) // Prevent duplicate items in a wardrobe
}

/* ────────────────────────────────────────────────────────────
   Follow model
────────────────────────────────────────────────────────────── */
model Follow {
  id          String   @id @default(cuid())
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("UserFollowers", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

/* ────────────────────────────────────────────────────────────
   Rate Limiting & Subscription models
────────────────────────────────────────────────────────────── */
model SubscriptionPlan {
  id                String   @id @default(cuid())
  name              String   @unique  // "Free", "Pro", "Premium"
  displayName       String             // "Free Plan", "Pro Plan", "Premium Plan"
  price             Decimal            // Monthly price in dollars
  dailyGenerations  Int                // Number of generations/edits per day
  features          String[]           // Array of feature descriptions
  isActive          Boolean  @default(true)
  stripePriceId     String?            // Stripe price ID for paid plans
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  userSubscriptions UserSubscription[]
}

model UserSubscription {
  id                String           @id @default(cuid())
  user              User             @relation(fields: [userId], references: [id])
  userId            String
  plan              SubscriptionPlan @relation(fields: [planId], references: [id])
  planId            String
  status            SubscriptionStatus @default(ACTIVE)
  stripeSubscriptionId String?        // Stripe subscription ID
  stripePriceId     String?          // Current Stripe price ID
  currentPeriodStart DateTime?       // Start of current billing period
  currentPeriodEnd   DateTime?       // End of current billing period
  cancelAtPeriodEnd Boolean @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([userId])  // One active subscription per user
}

model DailyUsage {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  date          DateTime @db.Date  // Just the date (YYYY-MM-DD)
  generations   Int      @default(0)  // Number of generations/edits used
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, date])  // One record per user per day
  @@index([userId, date])
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  UNPAID
}
