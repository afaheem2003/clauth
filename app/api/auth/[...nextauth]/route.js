import NextAuth from "next-auth";
import GoogleProvider from "next-auth/providers/google";
import { PrismaAdapter } from "@next-auth/prisma-adapter";
import prisma from "@/app/lib/prisma";

export const authOptions = {
  adapter: PrismaAdapter(prisma),
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
    }),
    // Add more providers if needed
  ],
  secret: process.env.NEXTAUTH_SECRET,
  session: {
    strategy: "jwt", // Using JWT strategy
  },
  callbacks: {
    async jwt({ token, user, account }) {
      // On initial sign-in, if account and user are available, set token.sub
      if (account && user) {
        console.log("[jwt callback] New sign-in with user.id:", user.id);
        token.sub = user.id; // set the user id (cuid generated by Prisma)
        token.email = user.email; // store email for fallback if needed
      }
      // Fallback: if token.sub is missing but token.email exists, try a DB lookup
      if (!token.sub && token.email) {
        console.log(
          "[jwt callback] token.sub is missing, attempting lookup for email:",
          token.email
        );
        try {
          const existingUser = await prisma.user.findUnique({
            where: { email: token.email },
            select: { id: true },
          });
          console.log("[jwt callback] findUnique result:", existingUser);
          if (existingUser) {
            token.sub = existingUser.id;
          }
        } catch (err) {
          console.error("[jwt callback] Error looking up user by email:", err);
        }
      }
      return token;
    },

    async session({ session, token }) {
      // Use token.sub (the actual DB user id) for the session
      if (token && token.sub) {
        session.user.uid = token.sub;
        console.log("[session callback] Set session.user.uid =", token.sub);
      } else {
        console.warn("[session callback] token.sub is undefined.");
      }
      return session;
    },
  },
};

const handler = NextAuth(authOptions);
export { handler as GET, handler as POST };
